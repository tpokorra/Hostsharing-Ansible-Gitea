---
- hosts: gitea
  become_user: "{{pac}}-{{user}}"
  vars:
    ansible_python_interpreter: /usr/bin/python3
    # see https://docs.ansible.com/ansible/latest/user_guide/become.html#risks-of-becoming-an-unprivileged-user
    ansible_common_remote_group: "{{pac}}"
    ansible_remote_tmp: ~/.ansible/tmp

  tasks:
  #- name: Create user, domain and database
  #  import_tasks: tasks/hs_basis.yml

  #################################
  ## create directories
  #################################
  - name: create directory bin
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/bin"
      state: directory
  - name: create directory data
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/data"
      state: directory
  - name: create directory etc
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/etc"
      state: directory
  - name: create directory var/log
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/var/log"
      state: directory
  - name: create directory var/run
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/var/run"
      state: directory
  - name: create directory custom conf
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/custom/conf"
      state: directory

  ##################################
  ## install gitea
  ##################################
  - name: get gitea gpg signature
    become: yes
    become_user: "{{pac}}-{{user}}"
    shell: |
      gpg --keyserver keys.openpgp.org --recv 7C9E68152594688862D62AF62D9AE806EC1592E2 || (rm -Rf .gnupg && exit -1)
      touch .ansible_gpg_key
    args:
      executable: /bin/bash
      chdir: "/home/pacs/{{pac}}/users/{{user}}"
      creates: "/home/pacs/{{pac}}/users/{{user}}/.ansible_gpg_key"

  - name: Download gitea binary directly
    become: yes
    get_url:
      url: https://dl.gitea.io/gitea/{{gitea_release}}/gitea-{{gitea_release}}-linux-amd64
      dest: /home/pacs/{{pac}}/users/{{user}}/gitea
      mode: '0755'
    when: url_proxy is not defined

  - name: Download gitea binary from proxy
    become: yes
    get_url:
      url: "{{url_proxy}}/gitea-{{gitea_release}}-linux-amd64"
      dest: /home/pacs/{{pac}}/users/{{user}}/gitea
      mode: '0755'
    when: url_proxy is defined

  - name: Validate Gitea binary
    become: yes
    shell: |
      wget --no-verbose https://dl.gitea.io/gitea/{{gitea_release}}/gitea-{{gitea_release}}-linux-amd64.asc || exit -1
      gpg --verify gitea-{{gitea_release}}-linux-amd64.asc gitea || (rm -f gitea-{{gitea_release}}-linux-amd64.asc gitea && exit -1)
    args:
      executable: /bin/bash
      chdir: "/home/pacs/{{pac}}/users/{{user}}"
      creates: "/home/pacs/{{pac}}/users/{{user}}/gitea-{{gitea_release}}-linux-amd64.asc"

  ##################################
  ## configuration
  ##################################
  - name: upload gitea configuration
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/custom/conf" src="templates/app.ini" mode=0600

  # see https://docs.gitea.io/en-us/command-line/#generate
  - name: generate secrets and insert into config file
    become: yes
    become_user: "{{pac}}-{{user}}"
    shell: |
      SECRET=`./gitea generate secret SECRET_KEY`
      sed -i "s/^SECRET_KEY .*/SECRET_KEY = $SECRET/g" ~/custom/conf/app.ini
      SECRET=`./gitea generate secret JWT_SECRET`
      sed -i "s/^JWT_SECRET .*/JWT_SECRET = $SECRET/g" ~/custom/conf/app.ini
      SECRET=`./gitea generate secret JWT_SECRET`
      sed -i "s/^LFS_JWT_SECRET .*/LFS_JWT_SECRET = $SECRET/g" ~/custom/conf/app.ini
      SECRET=`./gitea generate secret INTERNAL_TOKEN`
      sed -i "s/^INTERNAL_TOKEN .*/INTERNAL_TOKEN = $SECRET/g" ~/custom/conf/app.ini
    args:
      executable: /bin/bash
      chdir: "/home/pacs/{{pac}}/users/{{user}}"

  - name: init database and create admin user
    become: yes
    become_user: "{{pac}}-{{user}}"
    shell: |
      ./gitea migrate || exit -1
      ./gitea admin user create --admin --username {{admin_user}} --password {{admin_pwd}} --email {{admin_email}} || exit -1
      touch .ansible_user_created
    args:
      executable: /bin/bash
      chdir: "/home/pacs/{{pac}}/users/{{user}}"
      creates: "/home/pacs/{{pac}}/users/{{user}}/.ansible_user_created"

  #################################
  ## setup the data directory
  #################################
  - name: Check for HDD storage
    stat:
      path: /home/storage/{{pac}}/users/{{user}}
    register: hdd_storage
  - name: create repos directory on storage
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/storage/{{pac}}/users/{{user}}/repos"
      state: directory
      mode: 0744
      recurse: no
    when: hdd_storage.stat.exists

  - name: create symbolic link for repos to storage
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      src: "/home/storage/{{pac}}/users/{{user}}/repos"
      dest: "/home/pacs/{{pac}}/users/{{user}}/repos"
      state: link
    when: hdd_storage.stat.exists

  - name: create lfs directory on storage
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/storage/{{pac}}/users/{{user}}/lfs"
      state: directory
      mode: 0744
      recurse: no
    when: hdd_storage.stat.exists

  - name: create symbolic link for lfs to storage
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      src: "/home/storage/{{pac}}/users/{{user}}/lfs"
      dest: "/home/pacs/{{pac}}/users/{{user}}/data/lfs"
      state: link
    when: hdd_storage.stat.exists

  ##################################
  ## other software configuration
  ##################################
  - name: upload monit configuration
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/.monitrc" src="templates/monitrc" mode=0600

  - name: upload logrotate configuration
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/.logrotate" src="templates/logrotate" mode=0600

  - name: upload start script
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/bin" src="templates/gitea-start.sh" mode=0700
  - name: upload stop script
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/bin" src="templates/gitea-stop.sh" mode=0700

  ########################
  ## setup the apache site
  ########################
  - name: upload .htaccess file
    become: yes
    become_user: "{{pac}}-{{user}}"
    template:
      src: "templates/htaccess"
      dest: "/home/pacs/{{pac}}/users/{{user}}/doms/{{domain}}/htdocs-ssl/.htaccess"

  ####################################
  ## install cron jobs
  ####################################
  - name: start monit as cronjob
    become: yes
    become_user: "{{pac}}-{{user}}"
    cron:
      name: "start monit at reboot"
      special_time: reboot
      job: rm -f $HOME/var/run/* && /usr/bin/monit -c "$HOME/.monitrc"
  - name: run logrotate once a day
    become: yes
    become_user: "{{pac}}-{{user}}"
    cron:
      name: "logrotate"
      minute: "{{random_minute}}"
      hour: "1"
      job: "/usr/sbin/logrotate -s $HOME/.logrotate.state $HOME/.logrotate"

  ##############################################
  ## start services via monit
  ##############################################
  - name: start monit
    become: yes
    become_user: "{{pac}}-{{user}}"
    shell: |
      /usr/bin/monit -c ".monitrc"
    args:
      executable: /bin/bash
      chdir: "/home/pacs/{{pac}}/users/{{user}}/"
      creates: "/home/pacs/{{pac}}/users/{{user}}/var/run/monit.id"

